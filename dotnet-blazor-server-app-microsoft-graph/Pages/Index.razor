@using Microsoft.CognitiveServices.Speech;
@using Microsoft.Graph;
@using Microsoft.Identity.Web;
@using OpenAI.GPT3.Interfaces;
@using OpenAI.GPT3.ObjectModels.RequestModels;
@using OpenAI.GPT3.ObjectModels;
@using System.Diagnostics;
@using ProductiGraph.Toast

@inject IConfiguration configuration
@inject IOpenAIService openAiService
@inject ProjectService projectService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject ToastService ToastService

@page "/"

<div class="flex justify-center mb-5">
    <select class="select select-bordered w-full max-w-xs" @bind="selectedProject">
        <option disabled selected>Choose a project</option>
        @foreach (var name in projectNames)
        {
            <option>@name</option>
        }
    </select>
</div>
<div class="min-h-[62.5vh] relative flex justify-center">
    @if (messages.Count == 0)
    {
        <div class="my-auto flex flex-col justify-center items-center absolute top-1/2 -translate-y-1/2 prose mx-5 py-5 bg-base-200">
            <p class="text-2xl font-extrabold mb-3 underline">How to use</p>
            <ol class="mx-10 text-lg font-bold">
                <li>Pick a project</li>
                <li>Click the <button class="btn btn-sm btn-success my-0">START RECORDING</button> button</li>
                <li>Talk about what you want to do with it today</li>
                <li>Extract todos</li>
                <li>Remove unwanted todos</li>
                <li>Save to Microsoft todos</li>
            </ol>
        </div>
    }
    else
    {
        <div class="p-3 m-5 bg-base-200 min-h-[62.5vh] w-full">
            @foreach (var message in messages)
            {
                <div class="rounded-xl bg-blue-700 p-3 m-3 text-white">@message</div>
            }
        </div>
    }
</div>
<div class="flex flex-wrap justify-evenly w-full my-5 gap-y-5">
    @if (!speaking)
    {
        <button class="btn btn-success btn-sm" @onclick="StartRecording">Start Recording</button>
    }
    else
    {
        <button class="btn btn-error btn-sm" @onclick="StopRecording">Stop Recording</button>
    }
    <button class="btn btn-warning btn-sm" @onclick="ClearMessages">Clear Recording</button>
    <button class="btn btn-primary btn-sm" @onclick="ExtractTodos">Extract Todos</button>
</div>
<div class="flex flex-col w-3/4 mx-auto justify-center items-center">
</div>
<div>
    @if (todos.Count > 0)
    {
        <div class="p-3 m-5 bg-base-200">
            @foreach (var todo in todos)
            {
                <div class="collapse rounded-xl mx-5 collapse-arrow ">
                    <input type="checkbox" class="peer" />
                    <div class="collapse-title bg-primary text-primary-content rounded-xl w-full p-3 my-3">
                        <div class="flex items-center h-full">
                            @todo
                        </div>
                    </div>
                    <div class="collapse-content bg-base-200 text-primary-content">
                        <btn class="btn btn-sm btn-error" @onclick="() => RemoveTodo(todo)">Remove todo</btn>
                    </div>
                </div>
            }
        </div>
    }
</div>
@if (extractedTodos)
{
    <div class="flex flex-col w-3/4 mx-auto justify-center items-center gap-5">
        <button class="btn btn-info btn-sm" @onclick="AddToMicrosoftTodos">Add to Microsoft Todo</button>
        <button class="btn btn-warning btn-sm mb-10" @onclick="ClearTodos">Clear todos</button>
    </div>
}

@code {
    private bool speaking;
    private SpeechRecognizer? recognizer;
    private string speechKey = "";
    private string speechRegion = "";
    private List<string> messages = new List<string> 
    { 
        "Today I am going to be doing some research on Microsoft Graph and see its capabilities", 
        "I need to think of some usecases of Microsoft Graph", 
        "After that, I need to find out how to code in .NET", 
        "There's so much to learn about .NET, maybe I should start with C# first",
        "I need to learn how to use Blazor and how to use the Microsoft Graph API" 
    };
    private List<string> projectNames = new List<string>();
    private string selectedProject = "Choose a project";
    private List<string> todos = new List<string>();
    private bool extractedTodos = false;
    private string requestChangeCommand = "";

    protected override async Task OnInitializedAsync()
    {
        speechKey = configuration["SPEECH_KEY"]!;
        speechRegion = configuration["SPEECH_REGION"]!;
        var projects = await projectService.GetProjectsAsync();
        projectNames = projects.Select(p => p.Name).ToList();
    }

    private async Task StartRecording()
    {
        if (selectedProject == "Choose a project")
        {
            ToastService.ShowToast("You need to choose a project first! 😕", ToastLevel.Error);
            return;
        }

        var config = SpeechConfig.FromSubscription(speechKey, speechRegion);
        recognizer = new SpeechRecognizer(config);

        recognizer.Recognized += Recognizer_Recognized;
        speaking = true;
        await recognizer.StartContinuousRecognitionAsync();
        ToastService.ShowToast("Started recording", ToastLevel.Info);
    }

    private async void Recognizer_Recognized(object sender, SpeechRecognitionEventArgs e)
    {
        messages.Add(e.Result.Text);
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async Task StopRecording()
    {
        if (recognizer == null)
        {
            return;
        }
        speaking = false;
        await recognizer.StopContinuousRecognitionAsync();
        recognizer.Recognized -= Recognizer_Recognized;
        ToastService.ShowToast("Stopped recording", ToastLevel.Info);
    }

    private void ClearMessages()
    {
        messages = new List<string>();
        ToastService.ShowToast("Cleared messages! 😁", ToastLevel.Info);
    }

    private async Task ExtractTodos()
    {
        if (messages.Count == 0)
        {
            ToastService.ShowToast("There is nothing to extract from 😡", ToastLevel.Error);
            return;
        }

        todos = new List<string>();

        var prompt = "Imagine you are my productivity assistant. Extract potential todos for me from the following text, give me the todo in plaintext without any number ordering or '-' at the start. The text is: ";

        foreach (var message in messages)
        {
            if (message != "")
                prompt += message;
        }

        var completionResult = openAiService.Completions.CreateCompletionAsStream(new CompletionCreateRequest()
            {
                Prompt = prompt,
                MaxTokens = 1000
            }, Models.TextDavinciV3);

        var resMsg = "";
        await foreach (var completion in completionResult)
        {
            if (completion.Successful)
            {
                var res = completion.Choices.FirstOrDefault()?.Text;
                if (res == "\n")
                {
                    if (resMsg != "" && resMsg != "\n")
                    {
                        resMsg = resMsg.Replace("-", "");
                        todos.Add(resMsg);
                        await InvokeAsync(() =>
                        {
                            StateHasChanged();
                        });
                    }
                    resMsg = "";
                }
                else
                {
                    resMsg += res;
                }
                Debug.Write(completion.Choices.FirstOrDefault()?.Text);
            }
            else
            {
                if (completion.Error == null)
                {
                    ToastService.ShowToast($"Error 🤬: {completion.Error.Code}: {completion.Error.Message}", ToastLevel.Error);
                    throw new Exception("Unknown Error");
                }
            }
        }
        extractedTodos = true;
        ToastService.ShowToast("Successfully extracted todos 😀, click on the todo to remove it", ToastLevel.Success);
    }

    private void RemoveTodo(string todo)
    {
        todos = todos.Where(t => t != todo).ToList();
    }

    private void ClearTodos() {
        todos = new List<string>();
        extractedTodos = false;
        ToastService.ShowToast("Cleared todos! 😁", ToastLevel.Info);
    }

    private async Task AddToMicrosoftTodos()
    {
        if (selectedProject == "Choose a project")
        {
            ToastService.ShowToast("We need a project to add the tasks to 😕", ToastLevel.Warning);
            return;
        }

        try
        {
            var lists = await GraphServiceClient.Me.Todo.Lists.Request().GetAsync();
            var list = lists.FirstOrDefault(l => l.DisplayName == selectedProject);

            // Create a list if it is not found
            if (list == null)
            {
                ToastService.ShowToast("Project not found in todos 😵, creating one right now 🏃🏼‍♂️", ToastLevel.Info);
                var requestBody = new TodoTaskList
                    {
                        DisplayName = selectedProject,
                    };
                list = await GraphServiceClient.Me.Todo.Lists.Request().AddAsync(requestBody);
                ToastService.ShowToast("Successfully created project list 😁", ToastLevel.Success);
            }

            foreach (var todo in todos)
            {
                await CreateMicrosoftTodo(list.Id, todo);
            }
            ToastService.ShowToast($"Successfully added todos to '{selectedProject}' 😁", ToastLevel.Success);
            todos = new List<string>();
            messages = new List<string>();
            extractedTodos = false;
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }

    private async Task CreateMicrosoftTodo(string listId, string todo)
    {
        var requestBody = new TodoTask
            {
                Title = todo,
            };
        await GraphServiceClient.Me.Todo.Lists[listId].Tasks.Request().AddAsync(requestBody);
    }
}

