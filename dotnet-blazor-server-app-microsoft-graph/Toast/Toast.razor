@inject ToastService ToastService
@implements IDisposable

<div class="alert-info alert-success alert-warning alert-error hidden"></div>
<div tabindex="0" class="toast toast-bottom z-0">
    <div class="alert alert-@type @(_isVisible ? "" : "hidden") flex flex-col">
        <p class="text-lg font-bold">@_heading</p>
        <p class="text-lg">@_message</p>
    </div>
</div>

@code {
    private string? _heading;
    private string? _message;
    private bool _isVisible;
    private string? type;

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
        ToastService.OnHide += HideToast;
    }

    private void ShowToast(string message, ToastLevel level)
    {
        BuildToastSettings(level, message);
        _isVisible = true;
        StateHasChanged();
    }

    private async void HideToast()
    {
        _isVisible = false;
        await InvokeAsync(StateHasChanged);
    }

    private void BuildToastSettings(ToastLevel level, string message)
    {
        switch (level)
        {
            case ToastLevel.Info:
                type = "info";
                _heading = "Info";
                break;
            case ToastLevel.Success:
                type = "success";
                _heading = "Success";
                break;
            case ToastLevel.Warning:
                type = "warning";
                _heading = "Warning";
                break;
            case ToastLevel.Error:
                type = "error";
                _heading = "Error";
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(level), level, null);
        }

        _message = message;
    }

    void IDisposable.Dispose()
    {
        ToastService.OnShow -= ShowToast;
        ToastService.OnHide -= HideToast;
    }
}